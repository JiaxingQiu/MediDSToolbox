for(c in y_pred_cols){
pred[which(is.nan(pred[,c])),c] <- NA
pred[,c] <- as.numeric(pred[,c])
}
df_merged <- merge(pred, outc, all=TRUE)
df_merged$t_onset <- ifelse(!is.na(df_merged[,y_true_col]), df_merged$tt, NA)
# engineer to tte (event) and control group
by_pat <- group_by(df_merged, pat)
df_tte <- do(by_pat, assign_tte(., b=4*24*60*60, a=3*24*60*60, gap=gap_d*24*60*60) )
df_tte <- assign_icu(df_tte, evt_keyf)
head(df_tte,5)
save_path <- paste0("C:/Users/JQ2UW/Documents/NK/mimic_iii_events/reports/",y_true_col)
if(!dir.exists(save_path)) dir.create(save_path)
save_path <- paste0(save_path,"/gap",gap_d)
if(!dir.exists(save_path)) dir.create(save_path)
# sample size by ICU and event
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(event) %>%
summarise(npat = n_distinct(pat))
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(icu) %>%
summarise(npat_event = n_distinct(pat[which(event=="yes")]),
npat_cntrl = n_distinct(pat[which(event=="no")]) )
# filter out NA and NICU from ICUs
df_tte <- df_tte %>% filter(!is.na(icu), !icu=="NICU") %>% as.data.frame()
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(icu) %>%
summarise(npat_event = n_distinct(pat[which(event=="yes")]),
npat_cntrl = n_distinct(pat[which(event=="no")]) )
# check number of rows by the event group
# for(y_pred_col in y_pred_cols){
#   tmp <- df_tte %>% mutate(
#     y_pred = df_tte[,y_pred_col],
#     event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no"))) %>%
#     group_by(event) %>%
#     summarise(sum(!is.na(event)))
#   print(tmp)
# }
if(!file.exists(paste0(save_path, "/summ_obj.RData"))){
load(patf)
# prepare df for summary table
df <- df_tte
print(n_distinct(df_tte$pat[!is.na(df_tte$tte)]))
df <- merge(df_tte, distinct(patients[,c("pat", "GENDER", "DOB")]), all.x=TRUE)
# gender
df$female <- ifelse(df$GENDER%in%c("F"), 1, 0)
df$female[which(!(df$GENDER%in%c("F", "M") ))] <- NA
# death
load(evt_dodf)
df$death <- ifelse(df$pat%in% unique(dod[,c("pat")]), 1, 0)
# Age at admission
df$age <- (df$at - df$DOB)/86400/365# age at admission
# event outcome
df$outcome <- ifelse(!is.na(df$tte), paste0("at least 1 ", y_true_col), "control") # control = patient with no events
# race
load(evt_ethf)
ethn$pat <- as.numeric(ethn$pat)
df <- merge(df, ethn, all.x=TRUE)
df <- df[,c("pat", "outcome", "icu", "death", "female", "ethn", "age", "los", y_pred_cols)]
dict_df <- get.dict(df[1:100000,])
dict_df$type[which(dict_df$varname=="pat")]<-"key"
dict_df$unique_per_sbj[which(dict_df$varname=="pat")]<-"TRUE"
print(dict_df)
summ_obj <- front_summary_tbl( data=df,
dict_data = dict_df,
cluster_label = "pat",
aggregate_per = "cluster",
aggregate_conditioned_on_labels = "outcome",
stratify_by="outcome",
overall = TRUE )
save(summ_obj, file = paste0(save_path, "/summ_obj.RData"))
}else{
load(file=paste0(save_path, "/summ_obj.RData"))
}
knitr::kable(summ_obj$summ_df_reformat)
library(knitr)
library(kableExtra)
library(magrittr)
dt <- summ_obj$summ_df_reformat
kable(dt, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
cat(., file = paste0(save_path,"/summary_table.html"))
# # data availability
# df_tte %>% mutate(hsa = floor(tsa/60/60),
#                   event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no")) ) %>%
#   group_by(event, hsa) %>%
#   summarise(npat = n_distinct(pat)) %>%
#   ggplot(aes(x = hsa, y=npat, color = event)) +
#   geom_line() +
#   xlim(0, 24*14)
#
# # prediction
# pl <- list()
# for(y_pred_col in y_pred_cols){
#   pl[[y_pred_col]] <- df_tte %>% mutate(y_pred = df_tte[,y_pred_col],
#                     hsa = floor(tsa/60/60),
#                     event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no")) ) %>%
#     group_by(event, hsa) %>%
#     summarise(y_pred_mean = mean(y_pred, na.rm=TRUE),
#               y_pred_sd = sd(y_pred, na.rm=TRUE),
#               npat = n_distinct(pat) ) %>%
#     ggplot(aes(x = hsa, color=event, fill=event)) +
#     geom_line(aes(y=y_pred_mean)) +
#     geom_ribbon(aes(ymin=y_pred_mean-1.96*y_pred_sd/sqrt(npat),
#                     ymax=y_pred_mean+1.96*y_pred_sd/sqrt(npat)), alpha=0.2) +
#     xlim(0, 24*14) +
#     labs(y=y_pred_col)
# }
# p_tsa <- ggarrange(plotlist = pl, nrow=ceiling(length(y_pred_cols)/2), ncol=2)
# p_tsa
#
# create a subfolder for evaluation plots
if(!dir.exists(paste0(save_path,"/eval_plots"))){
dir.create(paste0(save_path,"/eval_plots"))
fl <- list()
p1 <- plot_tte(df_tte, y_pred_cols)
p2 <- plot_auc_cali(df_tte, y_pred_cols_model)
fl[["All"]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model)) ), left="All")
#### Break by ICU
for(i in unique(df_tte$icu)){
df_tte_icu <- df_tte[which(df_tte$icu%in%c(i)),]
p1 <- plot_tte(df_tte_icu, y_pred_cols)
p2 <- plot_auc_cali(df_tte_icu, y_pred_cols_model)
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/icu_",i,".png"), width=8, height=length(y_pred_cols)*4)
#### break by race
load(evt_ethf)
df_tte <- merge(df_tte, ethn, all.x=TRUE)
for(i in unique(df_tte$ethn)[!is.na(unique(df_tte$ethn))]){
tryCatch({
df_tte_sub <- df_tte[which(df_tte$ethn%in%c(i)),]
p1 <- plot_tte(df_tte_sub, y_pred_cols)
p2 <- plot_auc_cali(df_tte_sub, y_pred_cols_model)
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
},error=function(e){
print(e)
print(i)
})
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/ethn_",i,".png"), width=8, height=length(y_pred_cols)*4)
#### break by gender
load(patf)
gender <- distinct(patients[,c("pat", "GENDER")])
gender$GENDER <- ifelse(gender$GENDER%in%c("F"), "F", "M")
gender$GENDER[which(!(gender$GENDER%in%c("F", "M") ))] <- NA
df_tte <- merge(df_tte, gender, all.x=TRUE)
for(i in unique(df_tte$GENDER)[!is.na(unique(df_tte$GENDER))]){
tryCatch({
df_tte_sub <- df_tte[which(df_tte$GENDER%in%c(i)),]
p1 <- plot_tte(df_tte_sub, y_pred_cols)
p2 <- plot_auc_cali(df_tte_sub, y_pred_cols_model)
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
},error=function(e){
print(e)
print(i)
})
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/GENDER_",i,".png"), width=8, height=length(y_pred_cols)*4)
}
knitr::opts_chunk$set(root.dir="C:/Users/JQ2UW/Documents/NK/mimic_iii_events/scripts")
knitr::opts_chunk$set(error=FALSE,
collapse = FALSE,
echo = FALSE,
warning = FALSE,
message = FALSE,
results = FALSE,
fig.dim= c(10,5),
fig.fullwidth=TRUE )
setwd("X:/Joy/MediDSToolbox")
source("./shiny.R")
# set up global environment
setwd("C:/Users/JQ2UW/Documents/NK/mimic_iii_events/scripts")
source("./shiny.R")
plot_tte <- function(df_tte, y_pred_cols){
df_hte <- df_tte %>%
mutate(hte = ceiling(tte/60/60/3)*3) %>%
group_by(hte) %>%
summarise_at(y_pred_cols, list(mean = ~mean(., na.rm=TRUE),
sd = ~sd(., na.rm=TRUE),
q25 = ~quantile(., probs=0.25, na.rm=TRUE),
q50 = ~quantile(., probs=0.5, na.rm=TRUE),
q75 = ~quantile(., probs=0.75, na.rm=TRUE),
npat = ~n_distinct(pat[!is.na(.)]) )) %>% as.data.frame()
pl <- list()
for(y_pred_col in y_pred_cols){ # y_pred_cols will be recognized from globle parameter
df_plot <- df_hte
colnames(df_plot) <- gsub(y_pred_col,"y_pred",colnames(df_plot))
pl[[y_pred_col]] <- ggplot(df_plot, aes(x=hte)) +
geom_line(aes(y=y_pred_mean)) +
geom_ribbon(aes(ymin = y_pred_mean - 1.96*y_pred_sd/sqrt(y_pred_npat),
ymax = y_pred_mean + 1.96*y_pred_sd/sqrt(y_pred_npat)),alpha=0.2) +
labs(x=paste0("hours to event ",y_true_col), y=y_pred_col) #+
#ylim(0,6)
}
p_tte <- ggarrange(plotlist = pl, nrow=ceiling(length(y_pred_cols)/2), ncol=2)
pl <- list()
for(y_pred_col in y_pred_cols){ # y_pred_cols will be recognized from globle parameter
df_plot <- df_hte %>% filter(!is.na(hte)) %>% as.data.frame()
colnames(df_plot) <- gsub(y_pred_col,"y_pred",colnames(df_plot))
pl[[y_pred_col]] <- ggplot(df_plot, aes(x=hte)) +
geom_line(aes(y=y_pred_npat)) +
labs(x=paste0("hours to event ",y_true_col), y=paste0("patients w/", y_pred_col))
}
p_denom <- ggarrange(plotlist = pl, nrow=ceiling(length(y_pred_cols)/2), ncol=2)
p <- ggarrange(p_denom, p_tte, ncol=1, nrow=2)
return(p)
}
# treatment take time;
# charttime VS st
# st, tt: NY
# charttime:
# average
plot_auc_cali <- function(df_tte,
y_pred_cols,
hb = -4, # from hours before [
ha = 0 # hours after )
){
# auc and calibration curve
if("bo" %in% colnames(df_tte) ){
df_test <- df_tte %>% filter(is.na(bo)) %>% as.data.frame()
}else{
df_test <- df_tte
}
stopifnot(hb < ha)
df_test <- df_test[which(is.na(df_test$tte)|
(df_test$tte<ha*60*60&df_test$tte>=(hb*60*60)) ),]
df_test$y_true <- ifelse(is.na(df_test$tte), 0, 1)
cali <- list()
t_strat_all <- data.frame()
for(y_pred_col in y_pred_cols){
upper_cut <- quantile(df_test[,y_pred_col],0.999,na.rm=TRUE)
df_test[which(df_test[,y_pred_col]>=upper_cut),y_pred_col] <- upper_cut
df_test$y_pred <- df_test[,y_pred_col]
df_test %>% group_by(y_true) %>% summarise(n_distinct(pat))
# ------------ histogram ---------------
# ggplot(df_test, aes(x=y_pred, fill=y_true, group=y_true)) +
#   geom_histogram(position="dodge")
#
# ------------- ci auc ----------------
ci_auc <- round(as.numeric(ci.auc(df_test$y_true, df_test$y_pred)),2) # using observation-wise bootstrap
rob_ci_auc <- round(cstat_bootstrap(df_test$y_pred, df_test$y_true, id = df_test$pat, NBOOT = 100),2) # patient-wise bootstrap
# ------------- stratification -----------
# - post test risk
# - pre test risk
# - diagnostic likelihood ratio
t_strat <- cal_strat(y = df_test$y_true, p = df_test$y_pred)
t_strat$outcome <- y_pred_col
t_strat_all <- bind_rows(t_strat_all, t_strat) # combine for outcomes
# ------------- calibration plot -------------
df_hat <- df_test
df_hat$y_cali_groups <- cut(est_pctl( df_hat$y_pred ), 10)
base_mean_obs <- mean(df_hat$y_true[which(!is.na(df_hat$y_pred))], na.rm=TRUE)#mean(df_hat$y_true, na.rm=TRUE) # mean is from observation
# use median for prediction
# use mean for observation
df_cali <- df_hat %>%
group_by(y_cali_groups) %>%
summarise(y_cali_observed =  mean(y_true, na.rm=TRUE)/base_mean_obs,
y_cali_predicted = median(y_pred, na.rm=TRUE)) %>%
as.data.frame()
cali[[y_pred_col]] <- ggplot(df_cali, aes(x=y_cali_predicted, y=y_cali_observed)) +
geom_point() +
geom_text(aes(x = 2,
y = max(c(df_cali$y_cali_predicted, df_cali$y_cali_observed),na.rm=TRUE)-1,
label=paste0("AUC: " ,ci_auc[2]," ( ",ci_auc[1]," - ",ci_auc[3]," )\n",
"robAUC: " ,rob_ci_auc[2]," ( ",rob_ci_auc[1]," - ",rob_ci_auc[3]," )")),
size=4, na.rm = TRUE) +
geom_line(color="grey") +
geom_abline(intercept=0, slope = 1, size=0.3, linetype="dotted") +
labs(x="predicted", y="observed", title = y_pred_col,
subtitle=paste0("[",hb,",",ha,") hours") ) +
xlim(0, max(c(df_cali$y_cali_predicted, df_cali$y_cali_observed),na.rm=TRUE)) +
ylim(0, max(c(df_cali$y_cali_predicted, df_cali$y_cali_observed),na.rm=TRUE))
}
p_cali <- ggarrange(plotlist = cali, nrow=ceiling(length(y_pred_cols)/2), ncol=2)
return(list("p_cali" = p_cali, "t_strat_all" = t_strat_all))
}
##########  Load prediction and outcome datasets #########
# ---- dat (prediction dataset) ----
load(mntf) # mvtf = old version; mvtf_new = new version
dat$pat <- as.numeric(gsub("UNKNOWN_p","",beds[dat$bid])) # important add pat to the dat as key
# ---- hem ----
load(evt_hemf)
#y_pred_cols <- colnames(dat)[startsWith(colnames(dat), "Hemorrhage")]#some new columns
y_pred_cols_org <- c("hem.m", "hem.s", "VitalCount-ABP_D", "VitalStdev-ABP_D")
y_pred_cols <- gsub("[^[:alnum:]]+","_",y_pred_cols_org)
y_pred_cols_model <- gsub("[^[:alnum:]]+","_",c("hem.m", "hem.s"))
y_true_col <- c("hem.c")
outc <- hem # outcome dataframe
# gap of episode vary by event
gap_d = 14 # 14
# # ---- ahe ----
# load(evt_ahef)
# y_pred_cols_org <- c(colnames(dat)[startsWith(colnames(dat), "Hypoten")], "VitalCount-ABP_D", "VitalStdev-ABP_D")
# y_pred_cols <- gsub("[^[:alnum:]]+","_",y_pred_cols_org)
# y_pred_cols_model <- gsub("[^[:alnum:]]+","_",colnames(dat)[startsWith(colnames(dat), "Hypoten")])
# y_true_col <- c("ahe_wp")
# outc <- ahe_wp
# # gap of episode vary by event
# gap_d = 14 # 7 # 1 hour # 0
# # ---- death ----
# load(evt_dodf)
# y_pred_cols_org <- c(colnames(dat)[startsWith(colnames(dat), "Mortality")])
# y_pred_cols <- gsub("[^[:alnum:]]+","_",y_pred_cols_org)
# y_pred_cols_model <- gsub("[^[:alnum:]]+","_",colnames(dat)[startsWith(colnames(dat), "Mortality")])
# y_true_col <- c("dod.c")
# outc <- dod
# # gap of episode vary by event
# gap_d = 2 #:) # 7 # 1 hour # 0
##########  Engineer df_tte  ##########
# prepare df_tte (final evaluation dataset)
pred <- dat[,c("pat", "tt", y_pred_cols_org)]
data.table::setnames(pred, old = y_pred_cols_org, new = y_pred_cols )
pred <- as.data.frame(pred)
outc <- outc[,c("pat", "tt", y_true_col)]
outc <- as.data.frame(outc)
# key columns
key_cols <- c("pat", "tt")
for(k in key_cols){
pred[,k] <- as.numeric(pred[,k])
outc[,k] <- as.numeric(outc[,k])
}
# numeric prediction columns
for(c in y_pred_cols){
pred[which(is.nan(pred[,c])),c] <- NA
pred[,c] <- as.numeric(pred[,c])
}
df_merged <- merge(pred, outc, all=TRUE)
df_merged$t_onset <- ifelse(!is.na(df_merged[,y_true_col]), df_merged$tt, NA)
# engineer to tte (event) and control group
by_pat <- group_by(df_merged, pat)
df_tte <- do(by_pat, assign_tte(., b=4*24*60*60, a=3*24*60*60, gap=gap_d*24*60*60) )
df_tte <- assign_icu(df_tte, evt_keyf)
head(df_tte,5)
save_path <- paste0("C:/Users/JQ2UW/Documents/NK/mimic_iii_events/reports/",y_true_col)
if(!dir.exists(save_path)) dir.create(save_path)
save_path <- paste0(save_path,"/gap",gap_d)
if(!dir.exists(save_path)) dir.create(save_path)
# sample size by ICU and event
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(event) %>%
summarise(npat = n_distinct(pat))
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(icu) %>%
summarise(npat_event = n_distinct(pat[which(event=="yes")]),
npat_cntrl = n_distinct(pat[which(event=="no")]) )
# filter out NA and NICU from ICUs
df_tte <- df_tte %>% filter(!is.na(icu), !icu=="NICU") %>% as.data.frame()
df_tte %>% mutate(event = ifelse(!is.na(tte),"yes","no"))  %>%
group_by(icu) %>%
summarise(npat_event = n_distinct(pat[which(event=="yes")]),
npat_cntrl = n_distinct(pat[which(event=="no")]) )
# check number of rows by the event group
# for(y_pred_col in y_pred_cols){
#   tmp <- df_tte %>% mutate(
#     y_pred = df_tte[,y_pred_col],
#     event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no"))) %>%
#     group_by(event) %>%
#     summarise(sum(!is.na(event)))
#   print(tmp)
# }
if(!file.exists(paste0(save_path, "/summ_obj.RData"))){
load(patf)
# prepare df for summary table
df <- df_tte
print(n_distinct(df_tte$pat[!is.na(df_tte$tte)]))
df <- merge(df_tte, distinct(patients[,c("pat", "GENDER", "DOB")]), all.x=TRUE)
# gender
df$female <- ifelse(df$GENDER%in%c("F"), 1, 0)
df$female[which(!(df$GENDER%in%c("F", "M") ))] <- NA
# death
load(evt_dodf)
df$death <- ifelse(df$pat%in% unique(dod[,c("pat")]), 1, 0)
# Age at admission
df$age <- (df$at - df$DOB)/86400/365# age at admission
# event outcome
df$outcome <- ifelse(!is.na(df$tte), paste0("at least 1 ", y_true_col), "control") # control = patient with no events
# race
load(evt_ethf)
ethn$pat <- as.numeric(ethn$pat)
df <- merge(df, ethn, all.x=TRUE)
df <- df[,c("pat", "outcome", "icu", "death", "female", "ethn", "age", "los", y_pred_cols)]
dict_df <- get.dict(df[1:100000,])
dict_df$type[which(dict_df$varname=="pat")]<-"key"
dict_df$unique_per_sbj[which(dict_df$varname=="pat")]<-"TRUE"
print(dict_df)
summ_obj <- front_summary_tbl( data=df,
dict_data = dict_df,
cluster_label = "pat",
aggregate_per = "cluster",
aggregate_conditioned_on_labels = "outcome",
stratify_by="outcome",
overall = TRUE )
save(summ_obj, file = paste0(save_path, "/summ_obj.RData"))
}else{
load(file=paste0(save_path, "/summ_obj.RData"))
}
knitr::kable(summ_obj$summ_df_reformat)
library(knitr)
library(kableExtra)
library(magrittr)
dt <- summ_obj$summ_df_reformat
kable(dt, "html") %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
cat(., file = paste0(save_path,"/summary_table.html"))
# # data availability
# df_tte %>% mutate(hsa = floor(tsa/60/60),
#                   event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no")) ) %>%
#   group_by(event, hsa) %>%
#   summarise(npat = n_distinct(pat)) %>%
#   ggplot(aes(x = hsa, y=npat, color = event)) +
#   geom_line() +
#   xlim(0, 24*14)
#
# # prediction
# pl <- list()
# for(y_pred_col in y_pred_cols){
#   pl[[y_pred_col]] <- df_tte %>% mutate(y_pred = df_tte[,y_pred_col],
#                     hsa = floor(tsa/60/60),
#                     event = factor(ifelse(!is.na(tte),"yes","no"), levels=c("yes","no")) ) %>%
#     group_by(event, hsa) %>%
#     summarise(y_pred_mean = mean(y_pred, na.rm=TRUE),
#               y_pred_sd = sd(y_pred, na.rm=TRUE),
#               npat = n_distinct(pat) ) %>%
#     ggplot(aes(x = hsa, color=event, fill=event)) +
#     geom_line(aes(y=y_pred_mean)) +
#     geom_ribbon(aes(ymin=y_pred_mean-1.96*y_pred_sd/sqrt(npat),
#                     ymax=y_pred_mean+1.96*y_pred_sd/sqrt(npat)), alpha=0.2) +
#     xlim(0, 24*14) +
#     labs(y=y_pred_col)
# }
# p_tsa <- ggarrange(plotlist = pl, nrow=ceiling(length(y_pred_cols)/2), ncol=2)
# p_tsa
#
# create a subfolder for evaluation plots
if(!dir.exists(paste0(save_path,"/eval_plots"))){
dir.create(paste0(save_path,"/eval_plots"))
# set hours before for calibration and AUC
hb <- -4
ha <- 0
if(y_true_col=="dod.c"){
hb <- -4
ha <- 0
# will be [-24,0) once time fixed
}
#### Break by ICU
# All ICUs
fl <- list()
tb <- list()
p1 <- plot_tte(df_tte, y_pred_cols)
so <- plot_auc_cali(df_tte, y_pred_cols_model, hb = hb, ha=ha) # scoring object
p2 <- so$p_cali
tb[["All"]] <- so$t_strat_all # stratification table
fl[["All"]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model)) ), left="All")
# break
for(i in unique(df_tte$icu)){
df_tte_icu <- df_tte[which(df_tte$icu%in%c(i)),]
p1 <- plot_tte(df_tte_icu, y_pred_cols)
so <- plot_auc_cali(df_tte_icu, y_pred_cols_model, hb = hb, ha=ha) # scoring object
p2 <- so$p_cali
tb[[i]] <- so$t_strat_all # stratification table
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/icu_",i,".png"), width=8, height=length(y_pred_cols)*4)
for(i in names(tb)) xlsx::write.xlsx(tb[[i]],paste0(save_path, "/eval_plots/strat_icu.xlsx"),
sheetName=i, col.names = TRUE, row.names = F, append=TRUE)
#### break by race
load(evt_ethf)
df_tte <- merge(df_tte, ethn, all.x=TRUE)
fl <- list()
tb <- list()
for(i in unique(df_tte$ethn)[!is.na(unique(df_tte$ethn))]){
tryCatch({
df_tte_sub <- df_tte[which(df_tte$ethn%in%c(i)),]
p1 <- plot_tte(df_tte_sub, y_pred_cols)
so <- plot_auc_cali(df_tte_sub, y_pred_cols_model, hb = hb, ha=ha)
p2 <- so$p_cali
tb[[i]] <- so$t_strat_all
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
},error=function(e){
print(e)
print(i)
})
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/ethn_",i,".png"), width=8, height=length(y_pred_cols)*4)
for(i in names(tb)) xlsx::write.xlsx(tb[[i]],paste0(save_path, "/eval_plots/strat_ethn.xlsx"),
sheetName=i, col.names = TRUE, row.names = F, append=TRUE)
#### break by gender
load(patf)
gender <- distinct(patients[,c("pat", "GENDER")])
gender$GENDER <- ifelse(gender$GENDER%in%c("F"), "F", "M")
gender$GENDER[which(!(gender$GENDER%in%c("F", "M") ))] <- NA
df_tte <- merge(df_tte, gender, all.x=TRUE)
fl <- list()
tb <- list()
for(i in unique(df_tte$GENDER)[!is.na(unique(df_tte$GENDER))]){
tryCatch({
df_tte_sub <- df_tte[which(df_tte$GENDER%in%c(i)),]
p1 <- plot_tte(df_tte_sub, y_pred_cols)
so <- plot_auc_cali(df_tte_sub, y_pred_cols_model, hb = hb, ha=ha)
p2 <- so$p_cali
tb[[i]] <- so$t_strat_all
fl[[i]] <- annotate_figure( ggarrange(p1, p2, ncol = 1, nrow=2, heights = c(length(y_pred_cols),length(y_pred_cols_model))), left=i)
},error=function(e){
print(e)
print(i)
})
}
for(i in names(fl)) fl[[i]] %>% ggsave(filename=paste0(save_path,"/eval_plots/GENDER_",i,".png"), width=8, height=length(y_pred_cols)*4)
for(i in names(tb)) xlsx::write.xlsx(tb[[i]],paste0(save_path, "/eval_plots/strat_gender.xlsx"),
sheetName=i, col.names = TRUE, row.names = F, append=TRUE)
}
